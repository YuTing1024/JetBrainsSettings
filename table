<script> import {axios} from '@inap_base/assets/js/extend4srt.js' import qs from 'qs'; export default {   name: 'RTable',   components: {},   props: {     //每个表格的唯一标识     identify:{       type:String,       default: function() {         return "";       }     },     refreshcallback:Function,     isScrollY: {       type: Boolean,       default: function() {         return true;       }     },     isScrollX: {       type: Boolean,       default: function() {         return false;       }     },     search: {       type: Object,       default: function() {         return {};       }     },     data: {       type: Object,       default: function() {         return {};       }     },     showQueryLoading:{       type:Boolean,       default: true     },     columnsFilter: {       type: Object,       default: function() {         return {           show: false,           defaultChecked:[],           callback: function() {}         };       }     },     paginations: {       type: Object     },     searchplaceholder: {       type: String     },     loadingTarget:{       type: String     },     maxTableDataSize:{       type: Number,       default:0     }   },   data() {     return {       searchStr: '',       asynData: [],       columns: [],       checkedColumns: [],       pagination: {         pageSizeOptions: ['20', '40', '60' , '100'],         defaultPageSize:20,         showSizeChanger: true,         showQuickJumper: true,         showTotal: total => `共 ${total} 条`       },       tablePagination: {         page: 1,         size: 20,       },       sorter:{         field:'',         order:''       },        selectRowsMap:{}     };   },   mounted() {     this.renderColumns();     this.renderCheckedColumns();     if (this.paginations) {       this.pagination = Object.assign({}, this.pagination, this.paginations);     }      if (this.isAsynData) {       this.queryData({ page: 0, size: 20 });     }   },   computed: {     isAsynData() {       return this.data.url !== undefined;     },     paginationComputed(){       let _this = this;       return  {         pageSizeOptions: ['20', '40', '60' , '100'],         defaultPageSize:20,         showSizeChanger: true,         showQuickJumper: true,         showTotal: total => `共 ${total} 条`,         current: _this.tablePagination.page,         pageSize: _this.tablePagination.size,         onChange: (page, size) => {           _this.tablePagination.page = page;           _this.tablePagination.size = size;         },         onShowSizeChange: (current, size) => {           _this.tablePagination.page = current;           _this.tablePagination.size = size;         }       };     },     dataSource() {       let setFlag = function(data, keyword) {         return data && data.map(item => {           item.isNeed = isNeedBranch(item, keyword);           if (item.children && item.children.length) {             setFlag(item.children, keyword);           }           return item;         });       };       let isNeedBranch = function(item, keyword) {         let flag1 = false,             flag2 = false;          let hasContain = false;         Object.values(item).forEach(value => {           try {             if (typeof value != 'string') {               value = Util.isEmpty(value) ? "" : value.toString();             }             if (typeof keyword != 'string') {               keyword = Util.isEmpty(value) ? "" : keyword.toString();             }           } catch (e) {             console.log(e);           }           if (value.toLowerCase().indexOf(keyword.toLowerCase()) > -1) {             hasContain = true;           }         });          if (hasContain) {           flag1 = true;         } else if (item.children && item.children.length) {           item.children.forEach(child => {             if (isNeedBranch(child, keyword)) {               flag2 = true;             }           });         }         return flag1 || flag2;       };       let treeFilter = function(data) {         return data.filter((item, index) => {           if (item && item.children && item.children.length) {             item.children = treeFilter(item.children);           }           return item.isNeed;         });       };        if (this.isAsynData) {         return this.asynData;       }        let dataSource = JSON.parse(JSON.stringify(this.$attrs['data-source'] || []));       if (this.search.show === false) {         return dataSource;       } else {         let searchStr = this.searchStr.trim();         let columnsComputed = this.columnsComputed;         /*return dataSource.filter(row => {           let flag = false;            Object.values(row).forEach(value => {             if (typeof value == 'string' && value.indexOf(searchStr) > -1) {               flag = true;             }           });           return flag;         });*/         let dataSourceArr = JSON.parse(JSON.stringify(dataSource));         //数据中添加customRender后的数据         columnsComputed.forEach(column => {           if (typeof column.customRender == 'function') {             dataSourceArr && dataSourceArr.forEach((row, index) => {               row[column.dataIndex + '_customRender'] = column.customRender(row[column.dataIndex], row, index);             });           }         });         let data = setFlag(dataSourceArr, searchStr);         return treeFilter(data);       }     },     columnsComputed() {       let _this = this;       let columns = this.columns.filter(item => _this.checkedColumns.includes(item.dataIndex));       return columns.map(column => {         if (column.sorter == false) {           return column;         } else {           let dataIndex = column.dataIndex;           let sorter = (a, b) => {             let value1 = a[dataIndex];             let value2 = b[dataIndex];              if (!value1) {               return -1;             }             if (!value2) {               return 1;             }             if (value1.toString() < value2.toString()) {               return -1;             } else if (value1.toString() > value2.toString()) {               return 1;             } else {               return 0;             }           };           if (column.sortType) {             sorter = (a, b) => {               let value1 = a[dataIndex];               let value2 = b[dataIndex];               return sortutil.callDefaultSortByType(value1, value2, column.sortType);             };           }            return {             ...column,             sorter: this.data.url ? true : (column.sorter && column.sorter.compare ? column.sorter.compare : sorter)           };         }       });     }   },   render() {     const on = {       ...this.$listeners     };     const attrs = Object.assign({}, this.$attrs, { 'data-source': this.dataSource });     if (attrs['row-selection'] && attrs['row-selection']['onChange']) {       attrs['row-selection']['onChange'] = this.initRowSelectionChange(attrs['row-selection']['onChange']);       // console.log(attrs['row-selection']['onChange']);     }       if (this.columnsComputed.length == 0) {       attrs['row-selection'] = null;     }     if (this.isScrollY) {       if (!attrs.scroll) {         attrs.scroll = { y: `calc(100% - 50px)`};       } else {         if (!attrs.scroll.y) {           attrs.scroll.y = `calc(100% - 50px)`;         }       }     }     if (this.isScrollX) {       if (!attrs.scroll) {         attrs.scroll = `max-content`;       } else {         if (!attrs.scroll.x) {           attrs.scroll.x = `max-content`;         }       }     }     let columnFilterIcon = null;     if (this.columnsFilter.show) {       let options = this.columns.map(item => {         let hasSlotTile = !!(item && item.slots && item.slots.title);         let title = (item && item.slots && item.slots.title) ? item.originTitle : item.title;         return <a-checkbox value={item.dataIndex}>{title}</a-checkbox>;       });       columnFilterIcon = (           <div style="position: absolute;top: 8px;right: 8px;cursor: pointer;">             <a-popover overlayClassName="columnsFilterPopper" placement="leftTop" trigger="click" getPopupContainer={this.getPopupContainer}>               <template slot="content">                 <div>                   <a-checkbox-group v-model={this.checkedColumns} onChange={this.changeColumns}>                     {options}                   </a-checkbox-group>                 </div>               </template>               <i class="font_family icon-moreif"></i>             </a-popover>           </div>       );     }     // slots循环     const slots = Object.keys(this.$slots).map(slot => {       return <template slot={slot}>{this.$slots[slot]}</template>;     });     let scopedSlots = {};     if (this.columnsComputed.length == 0 && this.$scopedSlots.expandedRowRender) {       scopedSlots = Object.keys(this.$scopedSlots).map(slot => {         return slot != 'expandedRowRender';       });     } else {       scopedSlots = this.$scopedSlots;     }     let table = null;     let tableKey = Math.random();     let classStr='';     if (attrs.showHeader === false) {       classStr += ' noHeader';     }     if (attrs.showAction === false) {       classStr += ' noAction';     }     if (attrs.pagination === false) {       classStr += ' noPage';     }      if (this.isAsynData) {       on.change = this.handleTableChange;       classStr = 'RTableBody' + classStr;       debugger;       table = (           <div style="height:calc(100% - 50px);position: relative;" class={classStr}>             <a-table                 attrs={attrs}                 customRow = {attrs["customRow"]}                 data-source={this.asynData}                 row-selection={{...attrs['row-selection']}}                 pagination={this.pagination}                 scopedSlots={scopedSlots}                 columns={this.columnsComputed}                 on={on}             >               {slots}             </a-table>             {columnFilterIcon}           </div>       );     } else {       on.change = this.handleTableChange;       classStr = 'RTableSourceBody' + classStr;        table = (           <div style="height:calc(100% - 50px);position: relative;" class={classStr}>             <a-table                 key={tableKey}                 pagination={this.paginationComputed}                 attrs={attrs}                 customRow = {attrs["customRow"]}                 data-source={attrs['data-source']}                 row-selection={attrs['row-selection']}                 columns={this.columnsComputed}                 scopedSlots={scopedSlots}                 on={on}             >               {slots}             </a-table>             {columnFilterIcon}           </div>       );     }      let search = null;     if (this.search.show !== false) {       search = (           <div className="search" class='searchInput'>             <a-input                 allow-clear                 placeholder={this.searchplaceholder || '搜索'}                 value={this.searchStr}                 onInput={this.input}                 title={this.searchplaceholder || '搜索'}             >               <a-icon slot="suffix" type="search" />             </a-input>           </div>       );     }      const header = attrs.showAction === false ? null : (         <div class="tableHeader">           <div class="actions" style={{ width: this.search.show ? 'calc(100% - 230px)' : '100%' }}>             {this.$slots['actions']}           </div>           {search}         </div>     );     const headerExpanded = <div class="expandedHeader">{this.$slots['expandedHeader']}</div>;     return (         <div style="height:100%" class={this.isScrollY ? 'overflowTableY RTableComponent' : ' RTableComponent'}>           {header}           {headerExpanded}           {table}         </div>     );   },   methods: {     initRowSelectionChange(func){       let rowKey = this.$attrs['rowKey'] || this.$attrs['row-key'];       if (!rowKey) {         return func;       }       let _this = this;       return function(selectedRowKeys, selectedRows) {         debugger;         if (selectedRowKeys && selectedRowKeys.length == 0) {           _this.selectRowsMap = {};         }         (selectedRows || []).forEach(row => {           if (!_this.selectRowsMap[row[rowKey]]) {             _this.selectRowsMap[row[rowKey]] = row;           }         });         let newSelectRowsMap = {};         for (let [key, row] of Object.entries(_this.selectRowsMap)) {           if (selectedRowKeys.find(rowKey => rowKey == key)) {             newSelectRowsMap[key] = row;           }         }         _this.selectRowsMap = newSelectRowsMap;         func(selectedRowKeys, Object.values(newSelectRowsMap));       };     },     renderColumns(){       //主要用于判断是否保留排序       this.columns = [].concat(this.$attrs.columns);       /*if (!this.isAsynData) {         return ;       }*/       if (this.sorter.field && this.sorter.order) {         this.columns = this.columns.map(item => {           item.sortOrder = false;           if (item.dataIndex === this.sorter.field) {             item.sortOrder = this.sorter.order;           }           return item;         });       } else {         this.columns = this.columns.map(item => {           item.sortOrder = false;           return item;         });       }     },     renderCheckedColumns(){       if (this.identify) {         let tableCheckedColumns = localStorage.getItem('tableCheckedColumns') ? JSON.parse(localStorage.getItem('tableCheckedColumns'))[this.identify] : undefined;         if (tableCheckedColumns) {           this.checkedColumns = this.columns.filter(column => tableCheckedColumns.includes(column.dataIndex)).map(column => column.dataIndex);         } else {           if (this.columnsFilter && this.columnsFilter.defaultChecked && this.columnsFilter.defaultChecked.length > 0) {             this.checkedColumns = this.columnsFilter.defaultChecked;           } else {             this.checkedColumns = this.$attrs.columns.map(item => item.dataIndex);           }         }       } else {         if (this.columnsFilter &&this.columnsFilter.defaultChecked&& this.columnsFilter.defaultChecked.length > 0) {           this.checkedColumns = this.columnsFilter.defaultChecked;         } else {           this.checkedColumns = this.$attrs.columns.map(item => item.dataIndex);         }        }     },     input(e) {       this.searchStr = e.target.value;       this.debounce(this.inputChange, 2000);       if (this.isAsynData) {         this.debounce(() => {           this.queryData({ page: 0, size: this.pagination.pageSize || 20 });         }, 2000);       }     },     inputChange() {       this.$emit('searchChange', this.searchStr.trim());     },     changeColumns(value) {       this.checkedColumns = value;       if (typeof this.columnsFilter.callback == 'function') {         this.columnsFilter.callback(value);       }        //已选择的列保存在本地持久化缓存       if (this.identify) {         let tableCheckedColumnsStr = localStorage.getItem('tableCheckedColumns');         let tableCheckedColumns = tableCheckedColumnsStr ? JSON.parse(tableCheckedColumnsStr) : {};         tableCheckedColumns[this.identify] = this.checkedColumns;         localStorage.setItem('tableCheckedColumns', JSON.stringify(tableCheckedColumns));       }      },     getPopupContainer(triggerNode) {       return triggerNode.parentNode||document.body;     },     debounce: (function() {       let timer = null;       return function(func, delay) {         let context = this;         let args = arguments;         if (timer) {           clearTimeout(timer);         }         timer = setTimeout(function() {           func.apply(context, args);           timer = null;         }, delay);       };     })(),     handleTableChange(pagination, filters, sorter) {       //限制最多展示的数据，例如历史告警，超过20w条界面提示信息       if (this.maxTableDataSize && (pagination.current * pagination.pageSize > this.maxTableDataSize)) {         //重新给this.pagination赋值，是因为拦截了修改单页数量的接口查询，但是下拉选项还是选中了新的。         this.pagination = JSON.parse(JSON.stringify(this.pagination));         this.$message.warning("最多呈现前20万条记录，建议使用过滤功能查看");         return;       }        const pager = Object.assign(this.pagination, pagination);       pager.current = pagination.current;       this.pagination = pager;        let params = {         size: pagination.pageSize,         page: pagination.current - 1       };        if (sorter.order) {         this.sorter = Object.assign({}, sorter);         params.sort = sorter.field + ',' + sorter.order.replace('end', '');       } else {         this.sorter = {           field:'',           order:''         };       }       this.renderColumns();        if (this.isAsynData) {         this.queryData(params);       }     },     queryData({ page, size, sort }) {       let { url, method = 'GET', data, defaultSort} = this.data;        if (Util.isEmpty(sort) && !Util.isEmpty(defaultSort)) {         sort = defaultSort;       }        if (!this.data.url) {         return [];       }       if(this.data.firstPage) {         page++;       }       let params;       if (method == 'POST') {         let url = this.data.isLinkUrl ? this.data.url +             (this.data.url.indexOf('?') > -1 ? '&' : '?') +             `page=${page}&size=${size}` + (sort ? `&sort=${sort}` : '') +             `&${qs.stringify({keyword:this.searchStr.trim()})}`             : this.data.url;          params = {           url,           onlyData: true,           method: 'POST',           data: {             ...data,             page,             size           }         };          if (sort) {           params.data.sort = sort;         }          if (this.searchStr) {            if(this.data.firstPage) {             params.data.key = this.searchStr.trim();           } else {             params.data.keyword = this.searchStr.trim();           }         }       } else {         //如果有排序,需要判断下url中是否有传sort参数，有的话要替换         if (sort && url.indexOf('?') > -1) {           let urlArr = url.split('?');           let urlParamsArr = urlArr[1].split('&').filter(item => {             if (item.startsWith('sort=')) {               return false;             }             return true;           });           let newUrl = `${urlArr[0]}${urlParamsArr.length > 0 ? '?' + urlParamsArr.join('&') : ''}`;           params = {             url:                 newUrl +                 (newUrl.indexOf('?') > -1 ? '&' : '?') +                 `page=${page}&size=${size}` +                 (sort ? `&sort=${sort}` : '') +                 (this.searchStr ? `&${qs.stringify({keyword:this.searchStr.trim()})}` : ''),             method: 'GET',             onlyData: true           };         } else {           params = {             url:                 url +                 (url.indexOf('?') > -1 ? '&' : '?') +                 `page=${page}&size=${size}` +                 (sort ? `&sort=${sort}` : '') +                 (this.searchStr ? `&${qs.stringify({keyword:this.searchStr.trim()})}` : ''),             method: 'GET',             onlyData: true           };         }       }        let _this = this;       let loading;       if (this.showQueryLoading) {         loading = this.$loading({           text: '加载中...',           target: this.loadingTarget || 'body'         });       }        return axios(params).then(           resolve => {             if(this.data.beforeRequest) {               resolve = this.data.beforeRequest(resolve,params)             }             var data = resolve;             const pagination = { ..._this.pagination };             pagination.total = data[(_this.data.replaceFields && _this.data.replaceFields.totalCount) || 'totalCount'] || 0;             pagination.current = (data[(_this.data.replaceFields && _this.data.replaceFields.page) || 'page'] || 0) + 1;             let asynData = data[(_this.data.replaceFields && _this.data.replaceFields.items) || 'items'] || [];              //如果当前页大于最大页数，往前退一页             if (pagination.total > 0 && asynData.length == 0 && pagination.current > 0) {               this.pagination.current --;               this.queryData({ page : this.pagination.current - 1, size, sort });               return;             }              if (this.showQueryLoading) {               loading.close();             }              //用于修改查询回来的数据             if (typeof _this.data.refreshcallbackSync == "function") {               _this.data.refreshcallbackSync(asynData,data).then(result => {                 this.asynData = result;                 this.pagination = pagination;                 return Promise.resolve(result);               });             } else {               if (_this.data.refreshcallback) {                 _this.data.refreshcallback(data);               }               this.asynData = asynData;               this.pagination = pagination;               return Promise.resolve(data);             }            },           reject => {             if (this.showQueryLoading) {               loading.close();             }           }       );     }   },   watch: {     data: {       handler(newValue, oldValue) {         let _this = this;         if (newValue.url) {           _this.renderColumns();           let params = {             page: JSON.stringify(newValue) === JSON.stringify(oldValue) ? this.pagination.current || 0 : 0,             size: this.pagination.pageSize || 20           };            if (params.page > 0) {             params.page -= 1;//page表示页码，接口调用从0开始，所以减一           }           if (_this.sorter.field && _this.sorter.order) {             params.sort = _this.sorter.field + ',' + _this.sorter.order.replace('end', '');           }           this.queryData(params);         }       },       deep: true     },     ['$attrs.columns']:{       handler(){         this.renderColumns();         this.renderCheckedColumns();       },       deep: true     }   },   created() {} }; </script>  <style lang="scss"> .RTableComponent {   .tableHeader {     width: 100%;     min-height: 50px !important;     padding: 0 !important;     display: flex;     justify-content: space-between;     align-items: center;      .actions {       width: calc(100% - 230px);     }     .search {       width: 230px;     }   }    .ant-table-placeholder {     color: rgba(166, 187, 215, 0.65) !important;     background: transparent !important;     border-top: none !important;     border-bottom: none !important;     border-radius: 0 0 4px 4px !important;   }   .ant-table-wrapper {     height: 100%;     position: relative;      .ant-spin-nested-loading {       height: calc(100% - 64px);        .ant-spin-container {         height: 100%;          .ant-table {           height: 100%;           overflow-y: auto;           .ant-table-thead > tr > th.ant-table-column-sort {             background: unset !important;           }           .ant-table-thead > tr > th.ant-table-column-has-actions.ant-table-column-has-sorters:hover {             background: unset !important;           }           .ant-table-body {             .ant-table-column-sorter {               margin-top: 10px;             }              .ant-table-thead > tr > th.ant-table-column-sort {               background: unset !important;             }             .ant-table-thead > tr > th.ant-table-column-has-actions.ant-table-column-has-sorters:hover {               background: unset !important;             }              .ant-table-thead             > tr             > th             .ant-table-column-sorter             .ant-table-column-sorter-inner-full             .ant-table-column-sorter-down.on             path {               color: #467ef7;             }              .ant-table-thead             > tr             > th             .ant-table-column-sorter             .ant-table-column-sorter-inner-full             .ant-table-column-sorter-up.on             path {               color: #467ef7;             }           }         }       }     }      .ant-table-pagination.ant-pagination {       .ant-pagination-total-text {         position: absolute;         left: 100px;       }        .ant-pagination-options-size-changer.ant-select {         position: absolute;         left: 0;         bottom: -48px;       }       .ant-pagination-options-quick-jumper > input {         width: 50px !important;         margin-left: 10px !important;       }     }   }   .noHeader .ant-table-wrapper .ant-spin-nested-loading {     height: 100%;   }    .noAction {     height: 100% !important;   }   .columnsFilterPopper {     width: max-content;     .ant-checkbox-group {       display: flex;       flex-direction: column;       padding: 0px;       max-height: 500px;       overflow: auto;     }     .ant-checkbox-wrapper {       margin-left: 8px;     }     .ant-checkbox + span {       font-size: 14px;       font-weight: normal;     }   }    .overflowTableY {     .ant-table {       overflow: hidden;        .ant-table-content {         height: 100%;          .ant-table-scroll {           height: 100%;            .ant-table-header {             overflow: hidden !important;             margin-bottom: 0 !important;             padding-bottom: 0 !important;           }            .ant-table-body {             max-height: calc(100% - 50px) !important;             overflow-y: auto !important;             background: unset;           }         }       }        // .ant-table-thead > tr > th,       // .ant-table-tbody > tr > td {       //   padding: 0;       //   /*background: unset !important;*/       // }        .ant-table-thead > tr > th.ant-table-column-has-actions.ant-table-column-has-sorters:hover {         background: unset !important;       }     }     .noHeader {       .ant-table .ant-table-content .ant-table-scroll .ant-table-body {         max-height: 100% !important;       }     }     ::-webkit-scrollbar {       width: 4px;     }   } } [data-theme='default_skin_theme'] .overflowTableY .ant-table-column-sorter-down.on, [data-theme='default_skin_theme'] .overflowTableY .ant-table-column-sorter-up.on {   svg {     fill: #467ef7;   } }  [data-theme='white_skin_theme'] .overflowTableY .ant-table-column-sorter-down.on, [data-theme='white_skin_theme'] .overflowTableY .ant-table-column-sorter-up.on {   svg {     fill: #1b93fd;   } } </style> 
